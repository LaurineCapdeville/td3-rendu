{"ast":null,"code":"var _jsxFileName = \"/home/laurine/Documents/IMAC2/Semerstre2/JavaSript/TP/td2/tds-imac2-js/src/index.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ExerciseFourView } from './ex4/index';\n/*\nLa fonction `ReactDOM.render` est la fonction qui sert à dessiner l'application\njavascript sur le navigateur et à la rendre interactive.\n\nUne application React prend 2 paramètres:\n1. La vue. Elle représente votre page HTML comme vous l'aurez définie.\n   C'est une valeur qui représente la structure du DOM,\n   un modèle de données interprétable par la fonction `render`, qui génèrera l'application,\n   et appliquera les modifications dans le DOM. C'est exactement ce qu'on a fait au TD d'avant.\n2. Le noeud DOM dans lequel l'application devra dessiner.\n   ici on prend `document.getElementById('root')`, un node à la racine de notre arborescence,\n   mais on pourrait dessiner une application React dans une sous-partie d'une page web.\n */\n\n/**\n * Vous modifierez cette fonction pour afficher les résultats de vos applications.\n * Il faudra importer la bonne view pour chaque exercice. Je vous conseille vivement de nommer\n * vos imports en conséquence pour savoir ce que vous utilisez pour render l'app.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ExerciseFourView, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 25,\n  columnNumber: 3\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/home/laurine/Documents/IMAC2/Semerstre2/JavaSript/TP/td2/tds-imac2-js/src/index.jsx"],"names":["React","ReactDOM","ExerciseFourView","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACAD,QAAQ,CAACE,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ExerciseFourView } from './ex4/index';\n/*\nLa fonction `ReactDOM.render` est la fonction qui sert à dessiner l'application\njavascript sur le navigateur et à la rendre interactive.\n\nUne application React prend 2 paramètres:\n1. La vue. Elle représente votre page HTML comme vous l'aurez définie.\n   C'est une valeur qui représente la structure du DOM,\n   un modèle de données interprétable par la fonction `render`, qui génèrera l'application,\n   et appliquera les modifications dans le DOM. C'est exactement ce qu'on a fait au TD d'avant.\n2. Le noeud DOM dans lequel l'application devra dessiner.\n   ici on prend `document.getElementById('root')`, un node à la racine de notre arborescence,\n   mais on pourrait dessiner une application React dans une sous-partie d'une page web.\n */\n\n/**\n * Vous modifierez cette fonction pour afficher les résultats de vos applications.\n * Il faudra importer la bonne view pour chaque exercice. Je vous conseille vivement de nommer\n * vos imports en conséquence pour savoir ce que vous utilisez pour render l'app.\n */\nReactDOM.render(\n  <React.StrictMode>\n    <ExerciseFourView />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"]},"metadata":{},"sourceType":"module"}